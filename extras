#!/bin/bash
set -euo pipefail
cd /

# ===== Configuraciones iniciales =====
export LC_ALL=C
DEFAULT_DESKTOP=1
MINIMAL_INSTALL="n"  
USER_HOME="/home/${SUDO_USER:-$USER}"
USER_NAME="${SUDO_USER:-$USER}"

# ===== Detección automática de drivers gráficos =====
detect_gpu_drivers() {
    echo -e "\e[31mDetectando controladores gráficos..."
    local gpu_info=$(lspci | grep -i vga)
    
    if grep -qi "intel" <<< "$gpu_info"; then
        pacman -S --noconfirm xf86-video-intel vulkan-intel intel-media-driver
    elif grep -qi "amd" <<< "$gpu_info"; then
        pacman -S --noconfirm xf86-video-amdgpu vulkan-radeon libva-mesa-driver
    elif grep -qi "nvidia" <<< "$gpu_info"; then
        pacman -S --noconfirm nvidia nvidia-utils nvidia-settings cuda
    else
        echo -e "\e[31mUsando controladores genéricos (modesetting)"
    fi
}

# --- Selección de microcódigo ---
echo -e "\e[31mSeleccione su procesador para instalar el microcódigo adecuado:"
echo -e "\e[31m1) Intel"
echo -e "\e[31m2) AMD"
read -rp "Opción [1/2]: " proc_choice

microcode=""
case "$proc_choice" in
    1) microcode="intel-ucode" ;;
    2) microcode="amd-ucode" ;;
    *) echo -e "\e[31mOpción no válida, no se instalará microcódigo." ;;
esac

if [[ -n "$microcode" ]]; then  # Corregido: verificar antes de instalar
    pacman -S --needed --noconfirm $microcode
fi

# ===== Instalación mínima =====
echo -e "\e[31m<<==============================>>"
read -rp "¿Desea instalación mínima? [s/N]: " MINIMAL_INSTALL
MINIMAL_INSTALL=${MINIMAL_INSTALL,,}

# ===== Paquetes base esenciales =====
pacman -S --needed --noconfirm \
    xorg-server xorg-xinit xorg-xrandr \
    sudo bash-completion curl wget git \
    man-db man-pages texinfo pciutils \
    wpa_supplicant dialog xf86-input-synaptics htop \
    gvfs gvfs-afc gvfs-mtp 

# ===== Instalar controladores y kernel =====
detect_gpu_drivers

# ===== Selección de entornos gráficos (actualizado) =====
echo -e "\e[31m<<==============================>>"
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    echo -e "\e[31m===== Selección de entornos gráficos ====="
    echo -e "\e[31m1) i3wm (Default)"
    echo -e "\e[31m2) XFCE4"
    echo -e "\e[31m3) GNOME"
    echo -e "\e[31m4) KDE Plasma"
    echo -e "\e[31m5) Hyprland (Wayland moderno)"
    echo -e "\e[31m6) GNOME Minimal"
    echo -e "\e[31m7) Sway (i3 en Wayland)"
    echo -e "\e[31m8) MATE (Clásico ligero)"
    read -rp "Opciones (separar por comas): " desktop_choices

    IFS=',' read -ra choices <<< "${desktop_choices:-$DEFAULT_DESKTOP}"
    
    for choice in "${choices[@]}"; do
        case "$(tr -d '[:space:]' <<< "$choice")" in
            1) pacman -S --noconfirm i3-gaps rofi picom feh dunst polybar ;;
            2) pacman -S --noconfirm xfce4 xfce4-goodies ;;
            3) pacman -S --noconfirm gnome gnome-extra ;;
            4) pacman -S --noconfirm plasma kde-applications ;;
            5) pacman -S --noconfirm hyprland waybar grim slurp wofi ;;
            6) pacman -S --noconfirm gnome-shell gnome-control-center gdm ;;
            7) pacman -S --noconfirm sway swaylock swayidle wofi ;;
            8) pacman -S --noconfirm mate mate-extra mate-media ;;
            *) echo -e "\e[31mOpción $choice omitida" ;;
        esac
    done
fi

# Configuración básica de zsh
pacman -S --noconfirm zsh
chsh -s /bin/zsh "${SUDO_USER:-$USER}"

# ===== Paquetes opcionales (solo instalación completa) =====
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    pacman -S --noconfirm \
        lightdm lightdm-gtk-greeter \
        noto-fonts noto-fonts-emoji ttf-firacode-nerd \
        networkmanager network-manager-applet \
        pipewire pipewire-pulse pipewire-alsa pipewire-jack wireplumber \
        pavucontrol \
        kitty alacritty thunar firefox neovim
    
    # Herramientas de desarrollo
    pacman -S --noconfirm \
        docker docker-compose nodejs npm go rust \
        python python-pip base-devel
    
fi

# Configuración de lightdm
rm /etc/lightdm/lightdm.conf
mv lightdm.conf /etc/lightdm/
echo -e "\e[31mbackground=/usr/share/backgrounds/wall1.png" >> /etc/lightdm/lightdm-gtk-greeter.conf

# Configuración para el touchpad
mv 50-synaptics.conf /etc/X11/xorg.conf.d/

# Instalación de fuentes
mv fonts/* /usr/share/fonts/
rm -r fonts/

# Cargar paquete de iconos
mv Luv /usr/share/icons/

# Limpieza de archivos importados
rm conf grub extras usuarios

# Comando ves carga y configuración
cd /opt/
sudo git clone https://github.com/SolimanHub/comando_ves
sudo ln -s /opt/comando_ves/ves /usr/bin/ves

cd /

# Configurar servicios
systemctl enable NetworkManager
[[ "$MINIMAL_INSTALL" != "s" ]] && systemctl enable lightdm

# Configurar PipeWire (corregido: ejecutar como usuario)
sudo -u "$USER_NAME" systemctl --user enable pipewire pipewire-pulse wireplumber
sudo -u "$USER_NAME" systemctl --user start pipewire pipewire-pulse wireplumber

# Configuración de kernel alternativo
if pacman -Qi linux-zen &>/dev/null; then
    cat > /etc/mkinitcpio.conf << EOF
PRESETS=('default' 'fallback')
COMPRESSION="zstd"
EOF
    mkinitcpio -P
fi

# Configuración de Hyprland (si está instalado)
if pacman -Qi hyprland &>/dev/null; then
    sudo -u "$USER_NAME" mkdir -p "${USER_HOME}/.config/hypr"
    cat > "${USER_HOME}/.config/hypr/hyprland.conf" << EOF
exec-once = waybar & dbus-update-activation-environment --systemd & hyprpaper
monitor = ,preferred,auto,1
input { kb_layout = es }
EOF
fi

echo -e "\e[34m¡Instalación completada con éxito!"
