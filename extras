#!/bin/bash
set -euo pipefail
cd /
# ===== Configuraciones iniciales =====
export LC_ALL=C
DEFAULT_DESKTOP=1
MINIMAL_INSTALL="n"  
USER_HOME="/home/${SUDO_USER:-$USER}"
USER_NAME="${SUDO_USER:-$USER}"
# ===== Detección automática de drivers gráficos =====
detect_gpu_drivers() {
    echo "Detectando controladores gráficos..."
    local gpu_info=$(lspci | grep -i vga)
    
    if grep -qi "intel" <<< "$gpu_info"; then
        pacman -S --noconfirm --overwrite '*' xf86-video-intel vulkan-intel intel-media-driver
    elif grep -qi "amd" <<< "$gpu_info"; then
        pacman -S --noconfirm --overwrite '*' xf86-video-amdgpu vulkan-radeon libva-mesa-driver
    elif grep -qi "nvidia" <<< "$gpu_info"; then
        pacman -S --noconfirm --overwrite '*' nvidia nvidia-utils nvidia-settings cuda
    else
        echo "Usando controladores genéricos (modesetting)"
    fi
}

# ===== Detección automática del procesador =====
detect_microcode() {
    local vendor
    vendor=$(grep -m1 -oP 'vendor_id\s*:\s*\K.*' /proc/cpuinfo | tr -d ' ')
    
    if [[ "$vendor" == *"GenuineIntel"* ]]; then
        echo "Intel detectado. Instalando intel-ucode"
        microcode="intel-ucode"
    elif [[ "$vendor" == *"AuthenticAMD"* ]]; then
        echo "AMD detectado. Instalando amd-ucode"
        microcode="amd-ucode"
    else
        echo "Procesador no reconocido. No se instalará microcódigo."
        microcode=""
    fi
}

# Llamar a la función de detección
detect_microcode

# Instalar microcódigo si se detectó
if [[ -n "$microcode" ]]; then
    pacman -S --needed --noconfirm --overwrite='*' "$microcode"
fi

# ===== Instalación mínima =====
echo "<<==============================>>"
read -rp "¿Desea instalación mínima? [s/N]: " MINIMAL_INSTALL
MINIMAL_INSTALL=${MINIMAL_INSTALL,,}
# ===== Paquetes base esenciales =====
pacman -S --needed --noconfirm --overwrite '*' \
    xorg-server xorg-xinit xorg-xrandr \
    sudo bash-completion curl wget git \
    man-db man-pages texinfo pciutils \
    wpa_supplicant dialog xf86-input-synaptics htop \
    gvfs gvfs-afc gvfs-mtp 
# ===== Instalar controladores y kernel =====
detect_gpu_drivers
# ===== Selección de entornos gráficos (actualizado) =====
# Configuración básica de zsh
pacman -S --noconfirm --overwrite '*' zsh
chsh -s /bin/zsh "${SUDO_USER:-$USER}"
# ===== Paquetes opcionales (solo instalación completa) =====
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    pacman -S --noconfirm --overwrite '*' \
        lightdm lightdm-gtk-greeter \
        noto-fonts noto-fonts-emoji ttf-firacode-nerd \
        networkmanager network-manager-applet \
        pipewire pipewire-pulse pipewire-alsa pipewire-jack wireplumber \
        pavucontrol \
        kitty alacritty thunar firefox neovim
    
    # Herramientas de desarrollo
    pacman -S --noconfirm --overwrite '*' \
        docker docker-compose nodejs npm go rust \
        python python-pip base-devel
    
fi
# Configuración de lightdm
rm /etc/lightdm/lightdm.conf
mv lightdm.conf /etc/lightdm/
echo "background=/usr/share/backgrounds/wall1.png" >> /etc/lightdm/lightdm-gtk-greeter.conf
# Configuración para el touchpad
mv 50-synaptics.conf /etc/X11/xorg.conf.d/
# Instalación de fuentes
mv fonts/* /usr/share/fonts/
rm -r fonts/
# Cargar paquete de iconos
mv Luv /usr/share/icons/
# Limpieza de archivos importados
rm conf grub extras usuarios
# Comando ves carga y configuración
cd /opt/
sudo git clone https://github.com/SolimanHub/comando_ves
sudo ln -s /opt/comando_ves/ves /usr/bin/ves
cd /
# Configurar servicios
systemctl enable NetworkManager
[[ "$MINIMAL_INSTALL" != "s" ]] && systemctl enable lightdm
# Configurar PipeWire (corregido: ejecutar como usuario)
sudo -u "$USER_NAME" systemctl --user enable pipewire pipewire-pulse wireplumber
sudo -u "$USER_NAME" systemctl --user start pipewire pipewire-pulse wireplumber
# Configuración de kernel alternativo
if pacman -Qi linux-zen &>/dev/null; then
    cat > /etc/mkinitcpio.conf << EOF
PRESETS=('default' 'fallback')
COMPRESSION="zstd"
EOF
    mkinitcpio -P
fi
# Configuración de Hyprland (si está instalado)
if pacman -Qi hyprland &>/dev/null; then
    sudo -u "$USER_NAME" mkdir -p "${USER_HOME}/.config/hypr"
    cat > "${USER_HOME}/.config/hypr/hyprland.conf" << EOF
exec-once = waybar & dbus-update-activation-environment --systemd & hyprpaper
monitor = ,preferred,auto,1
input { kb_layout = es }
EOF
fi
echo "<<==============================>>"
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    echo "===== Selección de entornos gráficos ====="
    echo "1) i3wm (Default)"
    echo "2) XFCE4"
    echo "3) GNOME"
    echo "4) KDE Plasma"
    echo "5) Hyprland (Wayland moderno)"
    echo "6) GNOME Minimal"
    echo "7) Sway (i3 en Wayland)"
    echo "8) MATE (Clásico ligero)"
    read -rp "Opciones (separar por comas): " desktop_choices
    IFS=',' read -ra choices <<< "${desktop_choices:-$DEFAULT_DESKTOP}"
    
    for choice in "${choices[@]}"; do
        case "$(tr -d '[:space:]' <<< "$choice")" in
            1) pacman -S --noconfirm --overwrite '*' i3-gaps rofi picom feh dunst polybar ;;
            2) pacman -S --noconfirm --overwrite '*' xfce4 xfce4-goodies ;;
            3) pacman -S --noconfirm --overwrite '*' gnome gnome-extra ;;
            4) pacman -S --noconfirm --overwrite '*' plasma kde-applications ;;
            5) pacman -S --noconfirm --overwrite '*' hyprland waybar grim slurp wofi ;;
            6) pacman -S --noconfirm --overwrite '*' gnome-shell gnome-control-center gdm ;;
            7) pacman -S --noconfirm --overwrite '*' sway swaylock swayidle wofi ;;
            8) pacman -S --noconfirm --overwrite '*' mate mate-extra mate-media ;;
            *) echo "Opción $choice omitida" ;;
        esac
    done
fi

echo -e "\e[34m¡Instalación completada con éxito!"
mv yay_install "$USER_HOME"
echo "Para agregar AUR ejecutar ./yay_install"
