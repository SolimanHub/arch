#!/usr/bin/env bash
set -euo pipefail
trap 'echo -e "${RED}Error en línea $LINENO. Comando: $BASH_COMMAND${NC}"' ERR

# Configurar colores
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
NC='\033[0m'

# Parámetros globales
EFI_SIZE=513
SWAP_SIZE=2048
ESPACIO_MINIMO=23041  # EFI + SWAP + 20GB root

# ========== FUNCIONES ==========

confirmar() {
    local pregunta="$1"
    local respuesta
    read -rp "$pregunta [S/n]: " respuesta
    respuesta=${respuesta:-S}
    [[ "$respuesta" =~ ^[sS]$ ]]
}

solicitar_home() {
    if confirmar "¿Deseas crear una partición /home?"; then
        echo "true"
    else
        echo "false"
    fi
}

# ========== SELECCIÓN DE DISCO ==========

echo -e "${GREEN}\nDiscos disponibles para trabajar:${NC}"
echo -e "${GREEN}Selecciona uno (ej: sda o nvme0n1):${NC}"
echo
lsblk -d -o NAME,SIZE,TYPE | grep disk
echo
read -rp "Disco (ej. sda o nvme0n1): " unidad
DISCO="/dev/$unidad"

if [ ! -b "$DISCO" ]; then
    clear
    echo -e "${RED}Error: La unidad '$DISCO' no existe.${NC}"
    ./scripts/particionar_montar
    exit 1
fi

# Detectar sufijo para particiones
if [[ "$unidad" =~ nvme ]] || [[ "$unidad" =~ mmcblk ]]; then
    PART_SUFFIX="p"
else
    PART_SUFFIX=""
fi

# ========== CONFIGURACIÓN DE ENCRIPTACIÓN ==========

echo

if confirmar "¿Deseas encriptar el disco?"; then
    encriptar=true
    sed -i "s/esta_instalacion_es_con_disk_encryp/true/" ./scripts/conf
else
    encriptar=false
fi

# ========== BORRADO SEGURO (OPCIONAL) ==========

if $encriptar && confirmar "¿Deseas borrar el disco sobrescribiendo datos aleatorios? (Borrado irreversible)"; then
    echo -e "${YELLOW}\n¡Advertencia! ¡Esto borrará TODOS los datos en $DISCO de forma irreversible!${NC}"
    if confirmar "¿Confirmas que deseas continuar con el borrado seguro?"; then
        echo -e "${GREEN}Sobrescribiendo disco con datos aleatorios... Esto puede tardar horas.${NC}"
        echo -e "${YELLOW}Mensaje 'No queda espacio' es normal y esperado, no cancele la ejecucion.\n${NC}"
        dd if=/dev/urandom of="$DISCO" bs=1M status=progress conv=fdatasync 2>&1 || true
        echo -e "${GREEN}¡Disco sobrescrito correctamente!${NC}\n"
    else
        echo -e "${RED}Borrado seguro cancelado.${NC}"
        exit 1
    fi
fi

# ========== VALIDACIONES DE ESPACIO ==========

tamanio_mib=$(($(blockdev --getsize64 "$DISCO") / 1024 / 1024))

if (( tamanio_mib < ESPACIO_MINIMO )); then
    echo -e "${RED}Error: Espacio insuficiente. Necesitas al menos $((ESPACIO_MINIMO / 1024))GB.${NC}"
    exit 1
fi

# ========== PARTICIONADO BASE EFI ==========

echo -e "${GREEN}\n=== Particionado con parted ===${NC}"
parted -s "$DISCO" mklabel gpt

parted -s "$DISCO" mkpart ESP fat32 1MiB "$((EFI_SIZE + 1))MiB"
parted -s "$DISCO" set 1 esp on

# ========== MODO ENCRIPTADO ==========

if $encriptar; then
    # Partición LUKS para el resto del disco
    parted -s "$DISCO" mkpart primary "$((EFI_SIZE + 1))MiB" 100%
    partprobe "$DISCO"
    sleep 2

    EFI_PART="${DISCO}${PART_SUFFIX}1"
    LUKS_PART="${DISCO}${PART_SUFFIX}2"

    [ ! -b "$EFI_PART" ] || [ ! -b "$LUKS_PART" ] && { echo -e "${RED}Error: Particiones no detectadas${NC}"; exit 1; }

    echo -e "${GREEN}\n=== Formateando EFI ===${NC}"
    mkfs.fat -F32 "$EFI_PART"

    echo -e "${GREEN}\n=== Encriptando LUKS ===${NC}"
    cryptsetup luksFormat --type luks2 --pbkdf argon2id --iter-time 4000 \
        --key-size 512 --hash sha3-512 "$LUKS_PART"

    echo -e "${GREEN}\n=== Abriendo contenedor LUKS ===${NC}"
    cryptsetup open "$LUKS_PART" cryptlvm

    echo -e "${GREEN}\n=== Configurando LVM ===${NC}"
    pvcreate /dev/mapper/cryptlvm
    vgcreate vol01 /dev/mapper/cryptlvm

    vgdisplay vol01 > /dev/null 2>&1 || { echo -e "${RED}Error: Falló VG${NC}"; cryptsetup close cryptlvm; exit 1; }

    # Preguntar por /home
    crear_home=$(solicitar_home)

    total_vg_mib=$(vgs vol01 --units m -o vg_size --noheadings | sed 's/[[:alpha:]]//g' | awk '{print int($1)}')
    home_max_mib=$((total_vg_mib - 22*1024))

    if [[ "$crear_home" == "true" ]]; then
        (( home_max_mib <= 0 )) && { echo -e "${RED}Error: Espacio insuficiente${NC}"; cryptsetup close cryptlvm; exit 1; }
        
        home_max_gb=$((home_max_mib / 1024))
        default_home_gb=$((home_max_gb / 2))

        echo -e "${GREEN}Espacio disponible para /home: ${home_max_gb}GB${NC}"
        read -rp "Tamaño para /home (GB, default ${default_home_gb}): " home_gb
        home_gb=${home_gb:-$default_home_gb}

        if ! [[ "$home_gb" =~ ^[0-9]+$ ]] || (( home_gb > home_max_gb )); then
            echo -e "${RED}Error: Tamaño inválido${NC}"
            cryptsetup close cryptlvm
            exit 1
        fi

        home_mib=$((home_gb * 1024))
        lvcreate -L "${SWAP_SIZE}M" -n swap vol01
        lvcreate -L "${home_mib}M" -n home vol01
        lvcreate -l 100%FREE -n root vol01
    else
        lvcreate -L "${SWAP_SIZE}M" -n swap vol01
        lvcreate -l 100%FREE -n root vol01
    fi

    lvdisplay vol01/root > /dev/null 2>&1 || { echo -e "${RED}Error: LV root no creado${NC}"; cryptsetup close cryptlvm; exit 1; }

    echo -e "${GREEN}\n=== Formateando volúmenes ===${NC}"
    mkfs.ext4 /dev/vol01/root
    mkswap /dev/vol01/swap
    [[ "$crear_home" == "true" ]] && mkfs.ext4 /dev/vol01/home

    echo -e "${GREEN}\n=== Montando particiones ===${NC}"
    mount /dev/vol01/root /mnt
    mkdir -p /mnt/boot
    mount "$EFI_PART" /mnt/boot
    [[ "$crear_home" == "true" ]] && { mkdir -p /mnt/home; mount /dev/vol01/home /mnt/home; }
    swapon /dev/vol01/swap

    # Configurar UUID para systemd-boot
    LUKS_UUID=$(blkid -s UUID -o value "$LUKS_PART")
    [[ -z "$LUKS_UUID" ]] && { echo -e "${RED}Error: UUID LUKS no obtenido${NC}"; exit 1; }
    
    echo -e "${GREEN}UUID LUKS: ${YELLOW}${LUKS_UUID}${NC}"
    sed -i "s/<TU-UUID-AQUI>/${LUKS_UUID}/g" ./scripts/systemd_boot

# ========== MODO SIN ENCRIPTACIÓN ==========

else
    espacio_disponible_mib=$((tamanio_mib - EFI_SIZE - SWAP_SIZE))

    (( espacio_disponible_mib < 20480 )) && { echo -e "${RED}Error: Espacio insuficiente (mín 20GB root)${NC}"; exit 1; }

    echo -e "${GREEN}Espacio disponible: $((espacio_disponible_mib / 1024))GB${NC}"

    crear_home=$(solicitar_home)

    if [[ "$crear_home" == "true" ]]; then
        root_size_mib=$((espacio_disponible_mib * 70 / 100))
        home_size_mib=$((espacio_disponible_mib - root_size_mib))

        (( root_size_mib < 20480 )) && root_size_mib=20480
        home_size_mib=$((espacio_disponible_mib - root_size_mib))
        (( home_size_mib < 1024 )) && { echo -e "${RED}Error: No hay espacio para home${NC}"; exit 1; }

        swap_start=$((EFI_SIZE + 1))
        parted -s "$DISCO" mkpart primary linux-swap "${swap_start}MiB" "$((swap_start + SWAP_SIZE))MiB"
        parted -s "$DISCO" mkpart primary ext4 "$((swap_start + SWAP_SIZE))MiB" "$((swap_start + SWAP_SIZE + root_size_mib))MiB"
        parted -s "$DISCO" mkpart primary ext4 "$((swap_start + SWAP_SIZE + root_size_mib))MiB" 100%
    else
        swap_start=$((EFI_SIZE + 1))
        parted -s "$DISCO" mkpart primary linux-swap "${swap_start}MiB" "$((swap_start + SWAP_SIZE))MiB"
        parted -s "$DISCO" mkpart primary ext4 "$((swap_start + SWAP_SIZE))MiB" 100%
    fi

    partprobe "$DISCO"
    sleep 2

    EFI_PART="${DISCO}${PART_SUFFIX}1"
    SWAP_PART="${DISCO}${PART_SUFFIX}2"
    ROOT_PART="${DISCO}${PART_SUFFIX}3"
    HOME_PART="${DISCO}${PART_SUFFIX}4"

    # Validar particiones
    for p in "$EFI_PART" "$SWAP_PART" "$ROOT_PART"; do
        [ ! -b "$p" ] && { echo -e "${RED}Error: Partición $p no detectada${NC}"; exit 1; }
    done
    [[ "$crear_home" == "true" ]] && { [ ! -b "$HOME_PART" ] && { echo -e "${RED}Error: $HOME_PART no detectada${NC}"; exit 1; }; }

    echo -e "${GREEN}\n=== Formateando particiones ===${NC}"
    mkfs.fat -F32 "$EFI_PART"
    mkswap "$SWAP_PART"
    mkfs.ext4 "$ROOT_PART"
    [[ "$crear_home" == "true" ]] && mkfs.ext4 "$HOME_PART"

    echo -e "${GREEN}\n=== Montando particiones ===${NC}"
    mount "$ROOT_PART" /mnt
    mkdir -p /mnt/boot
    mount "$EFI_PART" /mnt/boot
    [[ "$crear_home" == "true" ]] && { mkdir -p /mnt/home; mount "$HOME_PART" /mnt/home; }
    swapon "$SWAP_PART"

    # Configurar systemd-boot sin encriptación
    ROOT_UUID=$(blkid -s UUID -o value "$ROOT_PART")
    [[ -z "$ROOT_UUID" ]] && { echo -e "${RED}Error: UUID root no obtenido${NC}"; exit 1; }
    
    echo -e "${GREEN}UUID root: ${YELLOW}${ROOT_UUID}${NC}"
    
    # Modificar systemd_boot para instalación sin encriptación
    sed -i "s/cryptdevice=UUID=<TU-UUID-AQUI>:cryptlvm root=\/dev\/vol01\/root/root=UUID=${ROOT_UUID}/" ./scripts/systemd_boot
fi

echo -e "${GREEN}\n✓ Particionado completado correctamente${NC}"
echo -e "${GREEN}Continuando con instalación de paquetes...${NC}"

echo -e "\033[32m==== PAQUETES ====\033[0m"
./scripts/paquetes
