#!/usr/bin/bash
set -euo pipefail
cd /

# ===== Configuraciones iniciales =====
export LC_ALL=C
DEFAULT_DESKTOP=1
MINIMAL_INSTALL="n"
USER_HOME="/home/${SUDO_USER:-$USER}"
USER_NAME="${SUDO_USER:-$USER}"

# ===== Detección automática de drivers gráficos =====
detect_gpu_drivers() {
    echo "Detectando controladores gráficos..."
    local gpu_info=$(lspci | grep -i vga)
    
    if grep -qi "intel" <<< "$gpu_info"; then
        pacman -S --noconfirm xf86-video-intel vulkan-intel intel-media-driver
    elif grep -qi "amd" <<< "$gpu_info"; then
        pacman -S --noconfirm xf86-video-amdgpu vulkan-radeon libva-mesa-driver
    elif grep -qi "nvidia" <<< "$gpu_info"; then
        pacman -S --noconfirm nvidia nvidia-utils nvidia-settings cuda
    else
        echo "Usando controladores genéricos (modesetting)"
    fi
}

# --- Selección de microcódigo ---
echo "Seleccione su procesador para instalar el microcódigo adecuado:"
echo "<<==============================>>"
echo "1) Intel"
echo "2) AMD"
read -rp "Opción [1/2]: " proc_choice

microcode=""
case "$proc_choice" in
    1) microcode="intel-ucode" ;;
    2) microcode="amd-ucode" ;;
    *) echo "Opción no válida, no se instalará microcódigo." ;;
esac
    pacman -S --needed --noconfirm $microcode

# ===== Instalación mínima =====
echo "<<==============================>>"
read -rp "¿Desea instalación mínima? [S/n]: " MINIMAL_INSTALL
MINIMAL_INSTALL=${MINIMAL_INSTALL,,}

# ===== Paquetes base esenciales =====
pacman -S --needed --noconfirm \
    xorg-server xorg-xinit xorg-xrandr \
    sudo bash-completion nano curl wget git \
    man-db man-pages texinfo pciutils \
    wpa_supplicant dialog xf86-input-synaptics htop \
    gvfs gvfs-afc gvfs-mtp 

# ===== Instalar controladores y kernel =====
detect_gpu_drivers

# ===== Selección de entornos gráficos (actualizado) =====
echo "<<==============================>>"
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    echo "===== Selección de entornos gráficos ====="
    echo "1) i3wm (Default)"
    echo "2) XFCE4"
    echo "3) GNOME"
    echo "4) KDE Plasma"
    echo "5) Hyprland (Wayland moderno)"
    echo "6) GNOME Minimal"
    echo "7) Sway (i3 en Wayland)"
    echo "8) MATE (Clásico ligero)"
    read -rp "Opciones (separar por comas): " desktop_choices

    IFS=',' read -ra choices <<< "${desktop_choices:-$DEFAULT_DESKTOP}"
    
    for choice in "${choices[@]}"; do
        case "$(tr -d '[:space:]' <<< "$choice")" in
            1) pacman -S --noconfirm i3-gaps rofi picom feh dunst polybar ;;
            2) pacman -S --noconfirm xfce4 xfce4-goodies ;;
            3) pacman -S --noconfirm gnome gnome-extra ;;
            4) pacman -S --noconfirm plasma kde-applications ;;
            5) pacman -S --noconfirm hyprland waybar grim slurp wofi ;;
            6) pacman -S --noconfirm gnome-shell gnome-control-center gdm ;;
            7) pacman -S --noconfirm sway swaylock swayidle wofi ;;
            8) pacman -S --noconfirm mate mate-extra mate-media ;;  # <- MATE añadido aquí
            *) echo "Opción $choice omitida" ;;
        esac
    done
fi

# ===== Paquetes opcionales (solo instalación completa) =====
if [[ "$MINIMAL_INSTALL" != "s" ]]; then
    pacman -S --noconfirm \
        lightdm lightdm-gtk-greeter \
        noto-fonts noto-fonts-emoji ttf-firacode-nerd \
        networkmanager network-manager-applet \
        pipewire pipewire-pulse pipewire-alsa pipewire-jack wireplumber \
        pavucontrol \
        kitty thunar firefox neovim
    
    # Herramientas de desarrollo
    pacman -S --noconfirm \
        docker docker-compose nodejs npm go rust \
        python python-pip base-devel
    
    su $USER_NAME
    # Instalación de yay para AUR
    if ! command -v yay &> /dev/null; then
        git clone https://aur.archlinux.org/yay.git
        (cd yay && makepkg -si --noconfirm)
        rm -rf yay
    fi
    
    # Paquetes AUR recomendados
    yay -S --noconfirm \
        nerd-fonts-fira-code \
        papirus-icon-theme \
        tela-icon-theme \
        zsh-theme-powerlevel10k
    exit
fi

# ===== Configuraciones post-instalación =====
# Configuración básica de zsh
pacman -S --noconfirm zsh
chsh -s /bin/zsh "${SUDO_USER:-$USER}"

# Configurar servicios
systemctl enable NetworkManager
[[ "$MINIMAL_INSTALL" != "s" ]] && systemctl enable lightdm

# Configurar PipeWire
systemctl --user enable pipewire pipewire-pulse wireplumber

# Configuración de kernel alternativo
if pacman -Qi linux-zen &>/dev/null; then
    cat > /etc/mkinitcpio.conf << EOF
PRESETS=('default' 'fallback')
COMPRESSION="zstd"
EOF
    mkinitcpio -P
fi

# Configuración de Hyprland (si está instalado)
if pacman -Qi hyprland &>/dev/null; then
    sudo -u "${SUDO_USER:-$USER}" mkdir -p "${USER_HOME}/.config/hypr"
    cat > "${USER_HOME}/.config/hypr/hyprland.conf" << EOF
exec-once = waybar & dbus-update-activation-environment --systemd & hyprpaper
monitor = ,preferred,auto,1
input { kb_layout = es }
EOF
fi

echo "¡Instalación completada con éxito!"
